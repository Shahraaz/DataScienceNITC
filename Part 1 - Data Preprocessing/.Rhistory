setwd("C:/Users/Sheraaz/Desktop/Syllabus/DataScience/Machine Learning A-Z Template Folder/Part 1 - Data Preprocessing")
install.packages("caTools")
dataset = read.csv('Data.csv')
dataset
find('Devtools')
install.packages('Devtools')
install.packages('devtools')
View(dataset)
View(dataset)
View(dataset)
install.packages('Devtools')
find('devtools')
install.packages('devtools')
ls
pwd
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# Feature Scaling
# training_set = scale(training_set)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Importing the dataset
dataset = read.csv('Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
dataset = read.csv('Data.csv')
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Age)
View(dataset)
View(dataset)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Salary)
View(dataset)
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
View(dataset)
View(dataset)
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1))
View(dataset)
View(dataset)
detach("package:caTools", unload = TRUE)
library(caTools)
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking Care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$DependentVariable, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
View(dataset)
View(dataset)
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
# Data Preprocessing Template
# Importing the dataset
dataset = read.csv('Data.csv')
# Taking Care of missing data
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x,na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country,
levels = c('France','Spain','Germany'),
labels = c(1,2,3))
dataset$Purchased = factor(dataset$Purchased,
levels = c('No','Yes'),
labels = c(0,1))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set)
# Feature Scaling
training_set = scale(training_set)
test_set = scale(test_set)
training_set[,2:3] = scale(training_set[,2:3])
test_set[,2:3] = scale(test_set[,2:3])
